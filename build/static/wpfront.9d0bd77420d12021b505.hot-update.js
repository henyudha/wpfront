webpackHotUpdate("wpfront",{

/***/ "./packages/mars-theme/src/components/pages/page.js":
/*!**********************************************************!*\
  !*** ./packages/mars-theme/src/components/pages/page.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../link */ \"./packages/mars-theme/src/components/link.js\");\n/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../list */ \"./packages/mars-theme/src/components/list/index.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/**\n * The Post component that Mars uses to render any kind of \"post type\", like\n * posts, pages, attachments, etc.\n *\n * It doesn't receive any prop but the Frontity store, which it receives from\n * {@link connect}. The current Frontity state is used to know which post type\n * should be rendered.\n *\n * @param props - The Frontity store (state, actions, and libraries).\n *\n * @example\n * ```js\n * <Switch>\n *   <Post when={data.isPostType} />\n * </Switch>\n * ```\n *\n * @returns The {@link Post} element rendered.\n */const Page=({state,actions,libraries})=>{// Get information about the current URL.\nconst data=state.source.get(state.router.link);// Get the data of the post.\nconst page=state.source[data.type][data.id];// Get the html2react component.\nconst Html2React=libraries.html2react.Component;/**\n   * Once the post has loaded in the DOM, prefetch both the\n   * home posts and the list component so if the user visits\n   * the home page, everything is ready and it loads instantly.\n   */Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(()=>{actions.source.fetch(\"/\");_list__WEBPACK_IMPORTED_MODULE_3__[\"default\"].preload();},[]);// Load the post, but only if the data is ready.\nreturn data.isReady?Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsxs\"])(ArticleContainer,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(TitleAlign,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Title,{dangerouslySetInnerHTML:{__html:page.title.rendered}})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Content,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__[\"jsx\"])(Html2React,{html:page.content.rendered})})]}):null;};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"connect\"])(Page));const ArticleContainer=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1fcq0a56\",label:\"ArticleContainer\"})( false?undefined:{name:\"8m5738\",styles:\"width:100%;max-width:960px;margin:0 auto;padding:14px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const TitleAlign=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1fcq0a55\",label:\"TitleAlign\"})( false?undefined:{name:\"1azakc\",styles:\"text-align:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Title=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"h3\", false?undefined:{target:\"e1fcq0a54\",label:\"Title\"})( false?undefined:{name:\"ymdyv3\",styles:\"margin:0;margin-top:24px;margin-bottom:4px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const StyledLink=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(_link__WEBPACK_IMPORTED_MODULE_2__[\"default\"], false?undefined:{target:\"e1fcq0a53\",label:\"StyledLink\"})( false?undefined:{name:\"1k93czn\",styles:\"padding:15px 0\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9oZW4vTm9kZXByby93cGZyb250L3BhY2thZ2VzL21hcnMtdGhlbWUvc3JjL2NvbXBvbmVudHMvcGFnZXMvcGFnZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEyRytCIiwiZmlsZSI6Ii9Vc2Vycy9oZW4vTm9kZXByby93cGZyb250L3BhY2thZ2VzL21hcnMtdGhlbWUvc3JjL2NvbXBvbmVudHMvcGFnZXMvcGFnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XG5pbXBvcnQgTGluayBmcm9tIFwiLi4vbGlua1wiO1xuaW1wb3J0IExpc3QgZnJvbSBcIi4uL2xpc3RcIjtcblxuLyoqXG4gKiBUaGUgUG9zdCBjb21wb25lbnQgdGhhdCBNYXJzIHVzZXMgdG8gcmVuZGVyIGFueSBraW5kIG9mIFwicG9zdCB0eXBlXCIsIGxpa2VcbiAqIHBvc3RzLCBwYWdlcywgYXR0YWNobWVudHMsIGV0Yy5cbiAqXG4gKiBJdCBkb2Vzbid0IHJlY2VpdmUgYW55IHByb3AgYnV0IHRoZSBGcm9udGl0eSBzdG9yZSwgd2hpY2ggaXQgcmVjZWl2ZXMgZnJvbVxuICoge0BsaW5rIGNvbm5lY3R9LiBUaGUgY3VycmVudCBGcm9udGl0eSBzdGF0ZSBpcyB1c2VkIHRvIGtub3cgd2hpY2ggcG9zdCB0eXBlXG4gKiBzaG91bGQgYmUgcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHByb3BzIC0gVGhlIEZyb250aXR5IHN0b3JlIChzdGF0ZSwgYWN0aW9ucywgYW5kIGxpYnJhcmllcykuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiA8U3dpdGNoPlxuICogICA8UG9zdCB3aGVuPXtkYXRhLmlzUG9zdFR5cGV9IC8+XG4gKiA8L1N3aXRjaD5cbiAqIGBgYFxuICpcbiAqIEByZXR1cm5zIFRoZSB7QGxpbmsgUG9zdH0gZWxlbWVudCByZW5kZXJlZC5cbiAqL1xuY29uc3QgUGFnZSA9ICh7IHN0YXRlLCBhY3Rpb25zLCBsaWJyYXJpZXMgfSkgPT4ge1xuICAvLyBHZXQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgVVJMLlxuICBjb25zdCBkYXRhID0gc3RhdGUuc291cmNlLmdldChzdGF0ZS5yb3V0ZXIubGluayk7XG4gIC8vIEdldCB0aGUgZGF0YSBvZiB0aGUgcG9zdC5cbiAgY29uc3QgcGFnZSA9IHN0YXRlLnNvdXJjZVtkYXRhLnR5cGVdW2RhdGEuaWRdO1xuXG4gIC8vIEdldCB0aGUgaHRtbDJyZWFjdCBjb21wb25lbnQuXG4gIGNvbnN0IEh0bWwyUmVhY3QgPSBsaWJyYXJpZXMuaHRtbDJyZWFjdC5Db21wb25lbnQ7XG5cbiAgLyoqXG4gICAqIE9uY2UgdGhlIHBvc3QgaGFzIGxvYWRlZCBpbiB0aGUgRE9NLCBwcmVmZXRjaCBib3RoIHRoZVxuICAgKiBob21lIHBvc3RzIGFuZCB0aGUgbGlzdCBjb21wb25lbnQgc28gaWYgdGhlIHVzZXIgdmlzaXRzXG4gICAqIHRoZSBob21lIHBhZ2UsIGV2ZXJ5dGhpbmcgaXMgcmVhZHkgYW5kIGl0IGxvYWRzIGluc3RhbnRseS5cbiAgICovXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aW9ucy5zb3VyY2UuZmV0Y2goXCIvXCIpO1xuICAgIExpc3QucHJlbG9hZCgpO1xuICB9LCBbXSk7XG5cbiAgLy8gTG9hZCB0aGUgcG9zdCwgYnV0IG9ubHkgaWYgdGhlIGRhdGEgaXMgcmVhZHkuXG4gIHJldHVybiBkYXRhLmlzUmVhZHkgPyAoXG4gICAgPEFydGljbGVDb250YWluZXI+XG4gICAgICA8VGl0bGVBbGlnbj5cbiAgICAgICAgPFRpdGxlIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogcGFnZS50aXRsZS5yZW5kZXJlZCB9fSAvPlxuXG4gICAgICAgIHsvKiBIaWRlIGF1dGhvciBhbmQgZGF0ZSBvbiBwYWdlc1xuICAgICAgICB7IWRhdGEuaXNQYWdlICYmIChcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAge2F1dGhvciAmJiAoXG4gICAgICAgICAgICAgIDxTdHlsZWRMaW5rIGxpbms9e2F1dGhvci5saW5rfT5cbiAgICAgICAgICAgICAgICA8QXV0aG9yPlxuICAgICAgICAgICAgICAgICAgRWRpdG9yOiA8Yj57YXV0aG9yLm5hbWV9PC9iPlxuICAgICAgICAgICAgICAgIDwvQXV0aG9yPlxuICAgICAgICAgICAgICA8L1N0eWxlZExpbms+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPERhdGVXcmFwcGVyPlxuICAgICAgICAgICAgICB7XCIgXCJ9XG4gICAgICAgICAgICAgIG9uIDxiPntkYXRlLnRvRGF0ZVN0cmluZygpfTwvYj5cbiAgICAgICAgICAgIDwvRGF0ZVdyYXBwZXI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9ICovfVxuICAgICAgPC9UaXRsZUFsaWduPlxuICAgICAgey8qIExvb2sgYXQgdGhlIHNldHRpbmdzIHRvIHNlZSBpZiB3ZSBzaG91bGQgaW5jbHVkZSB0aGUgZmVhdHVyZWQgaW1hZ2UgKi99XG4gICAgICB7Lyoge3N0YXRlLnRoZW1lLmZlYXR1cmVkLnNob3dPblBvc3QgJiYgKFxuICAgICAgICA8RmVhdHVyZWRNZWRpYSBpZD17cG9zdC5mZWF0dXJlZF9tZWRpYX0gLz5cbiAgICAgICl9ICovfVxuXG5cbiAgICAgIHsvKiB7ZGF0YS5pc0F0dGFjaG1lbnQgPyAoXG4gICAgICAgIC8vIElmIHRoZSBwb3N0IGlzIGFuIGF0dGFjaG1lbnQsIGp1c3QgcmVuZGVyIHRoZSBkZXNjcmlwdGlvbiBwcm9wZXJ0eSxcbiAgICAgICAgLy8gd2hpY2ggYWxyZWFkeSBjb250YWlucyB0aGUgdGh1bWJuYWlsLlxuICAgICAgICA8ZGl2IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogcG9zdC5kZXNjcmlwdGlvbi5yZW5kZXJlZCB9fSAvPlxuICAgICAgKSA6ICggKi99XG4gICAgICAgIHsvKiAvLyBSZW5kZXIgdGhlIGNvbnRlbnQgdXNpbmcgdGhlIEh0bWwyUmVhY3QgY29tcG9uZW50IHNvIHRoZSBIVE1MIGlzICovfVxuICAgICAgICB7LyogLy8gcHJvY2Vzc2VkIGJ5IHRoZSBwcm9jZXNzb3JzIHdlIGluY2x1ZGVkIGluIHRoZSAqL31cbiAgICAgICAgey8qIC8vIGxpYnJhcmllcy5odG1sMnJlYWN0LnByb2Nlc3NvcnMgYXJyYXkuICovfVxuICAgICAgICA8Q29udGVudD5cbiAgICAgICAgICA8SHRtbDJSZWFjdCBodG1sPXtwYWdlLmNvbnRlbnQucmVuZGVyZWR9IC8+XG4gICAgICAgIDwvQ29udGVudD5cbiAgICAgIHsvKiApfSAqL31cbiAgICA8L0FydGljbGVDb250YWluZXI+XG4gICkgOiBudWxsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChQYWdlKTtcblxuY29uc3QgQXJ0aWNsZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHdpZHRoOjEwMCU7XG4gIG1heC13aWR0aDogOTYwcHg7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nOiAxNHB4O1xuYDtcblxuY29uc3QgVGl0bGVBbGlnbiA9IHN0eWxlZC5kaXZgXG4gIHRleHQtYWxpZ246Y2VudGVyO1xuYDtcblxuY29uc3QgVGl0bGUgPSBzdHlsZWQuaDNgXG4gIG1hcmdpbjogMDtcbiAgbWFyZ2luLXRvcDogMjRweDtcbiAgbWFyZ2luLWJvdHRvbTogNHB4O1xuYDtcblxuY29uc3QgU3R5bGVkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgcGFkZGluZzogMTVweCAwO1xuYDtcblxuY29uc3QgQXV0aG9yID0gc3R5bGVkLnBgXG4gIGNvbG9yOiAjNjY2NjY2O1xuICBmb250LXNpemU6IDAuOWVtO1xuICBkaXNwbGF5OiBpbmxpbmU7XG5gO1xuXG5jb25zdCBEYXRlV3JhcHBlciA9IHN0eWxlZC5wYFxuICBjb2xvcjogIzY2NjY2NjtcbiAgZm9udC1zaXplOiAwLjllbTtcbiAgZGlzcGxheTogaW5saW5lO1xuYDtcblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCBpcyB0aGUgcGFyZW50IG9mIHRoZSBgY29udGVudC5yZW5kZXJlZGAgSFRNTC4gV2UgY2FuIHVzZSBuZXN0ZWRcbiAqIHNlbGVjdG9ycyB0byBzdHlsZSB0aGF0IEhUTUwuXG4gKi9cbmNvbnN0IENvbnRlbnQgPSBzdHlsZWQuZGl2YFxuICB3b3JkLWJyZWFrOiBicmVhay13b3JkO1xuICBtYXJnaW4tdG9wOiAzMHB4O1xuICAqIHtcbiAgICBtYXgtd2lkdGg6IDYyNHB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1hcmdpbjogYXV0bztcbiAgfVxuXG4gIHAge1xuICAgIGxpbmUtaGVpZ2h0OiAxLjU1ZW07XG4gICAgZm9udC1zaXplOiAxLjE1ZW07XG4gICAgbGVldGVyLXNwYWNpbmc6IC4wMWVtO1xuICAgIG1hcmdpbjogLjJlbSBhdXRvIDEuMWVtO1xuICB9XG5cbiAgaW1nIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICBvYmplY3QtcG9zaXRpb246IGNlbnRlcjtcbiAgfVxuXG4gIGZpZ3VyZSB7XG4gICAgbWFyZ2luOiAyNHB4IGF1dG87XG4gICAgd2lkdGg6IDEwMCU7XG5cbiAgICBmaWdjYXB0aW9uIHtcbiAgICAgIGZvbnQtc2l6ZTogMC43ZW07XG4gICAgfVxuICB9XG5cbiAgaWZyYW1lIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW46IGF1dG87XG4gIH1cblxuICBibG9ja3F1b3RlIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAxNnB4IGF1dG87XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgIGJvcmRlci1sZWZ0OiA0cHggc29saWQgcmdiYSgxMiwgMTcsIDQzKTtcbiAgICBwYWRkaW5nOiA0cHggMTZweDtcbiAgfVxuXG4gIGEge1xuICAgIGNvbG9yOiByZ2IoMzEsIDU2LCAxOTcpO1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICB9XG5cbiAgLyogSW5wdXQgZmllbGRzIHN0eWxlcyAqL1xuXG4gIGlucHV0W3R5cGU9XCJ0ZXh0XCJdLFxuICBpbnB1dFt0eXBlPVwiZW1haWxcIl0sXG4gIGlucHV0W3R5cGU9XCJ1cmxcIl0sXG4gIGlucHV0W3R5cGU9XCJ0ZWxcIl0sXG4gIGlucHV0W3R5cGU9XCJudW1iZXJcIl0sXG4gIGlucHV0W3R5cGU9XCJkYXRlXCJdLFxuICB0ZXh0YXJlYSxcbiAgc2VsZWN0IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBwYWRkaW5nOiA2cHggMTJweDtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICBsaW5lLWhlaWdodDogMS41O1xuICAgIGNvbG9yOiAjNDk1MDU3O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZC1jbGlwOiBwYWRkaW5nLWJveDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2VkNGRhO1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBvdXRsaW5lLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICB0cmFuc2l0aW9uOiBvdXRsaW5lLWNvbG9yIDAuMTVzIGVhc2UtaW4tb3V0LCBib3gtc2hhZG93IDAuMTVzIGVhc2UtaW4tb3V0O1xuICAgIG1hcmdpbjogOHB4IDAgNHB4IDA7XG5cbiAgICAmOmZvY3VzIHtcbiAgICAgIG91dGxpbmUtY29sb3I6ICMxZjM4YzU7XG4gICAgfVxuICB9XG5cbiAgaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgIC1tcy10b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcbiAgICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogbm9uZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjMWYzOGM1O1xuICAgIHBhZGRpbmc6IDEycHggMzZweDtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgbGluZS1oZWlnaHQ6IDEuNDI4NTcxNDM7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMxZjM4YzU7XG4gIH1cblxuICAvKiBXb3JkUHJlc3MgQ29yZSBBbGlnbiBDbGFzc2VzICovXG5cbiAgQG1lZGlhIChtaW4td2lkdGg6IDQyMHB4KSB7XG4gICAgaW1nLmFsaWduY2VudGVyLFxuICAgIGltZy5hbGlnbmxlZnQsXG4gICAgaW1nLmFsaWducmlnaHQge1xuICAgICAgd2lkdGg6IGF1dG87XG4gICAgfVxuXG4gICAgLmFsaWduY2VudGVyIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gICAgfVxuXG4gICAgLmFsaWducmlnaHQge1xuICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgbWFyZ2luLWxlZnQ6IDI0cHg7XG4gICAgfVxuXG4gICAgLmFsaWdubGVmdCB7XG4gICAgICBmbG9hdDogbGVmdDtcbiAgICAgIG1hcmdpbi1yaWdodDogMjRweDtcbiAgICB9XG4gIH1cbmA7XG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Author=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"p\", false?undefined:{target:\"e1fcq0a52\",label:\"Author\"})( false?undefined:{name:\"1i1qai6\",styles:\"color:#666666;font-size:0.9em;display:inline\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const DateWrapper=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"p\", false?undefined:{target:\"e1fcq0a51\",label:\"DateWrapper\"})( false?undefined:{name:\"1i1qai6\",styles:\"color:#666666;font-size:0.9em;display:inline\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/**\n * This component is the parent of the `content.rendered` HTML. We can use nested\n * selectors to style that HTML.\n */const Content=Object(frontity__WEBPACK_IMPORTED_MODULE_1__[\"styled\"])(\"div\", false?undefined:{target:\"e1fcq0a50\",label:\"Content\"})( false?undefined:{name:\"uywpdl\",styles:\"word-break:break-word;margin-top:30px;*{max-width:624px;width:100%;margin:auto;}p{line-height:1.55em;font-size:1.15em;leeter-spacing:.01em;margin:.2em auto 1.1em;}img{width:100%;object-fit:cover;object-position:center;}figure{margin:24px auto;width:100%;figcaption{font-size:0.7em;}}iframe{display:block;margin:auto;}blockquote{text-align:center;margin:16px auto;background-color:rgba(0, 0, 0, 0.1);border-left:4px solid rgba(12, 17, 43);padding:4px 16px;}a{color:rgb(31, 56, 197);text-decoration:underline;}input[type=\\\"text\\\"],input[type=\\\"email\\\"],input[type=\\\"url\\\"],input[type=\\\"tel\\\"],input[type=\\\"number\\\"],input[type=\\\"date\\\"],textarea,select{display:block;padding:6px 12px;font-size:16px;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:4px;outline-color:transparent;transition:outline-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out;margin:8px 0 4px 0;&:focus{outline-color:#1f38c5;}}input[type=\\\"submit\\\"]{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid #1f38c5;padding:12px 36px;font-size:14px;line-height:1.42857143;border-radius:4px;color:#fff;background-color:#1f38c5;}@media (min-width: 420px){img.aligncenter,img.alignleft,img.alignright{width:auto;}.aligncenter{display:block;margin-left:auto;margin-right:auto;}.alignright{float:right;margin-left:24px;}.alignleft{float:left;margin-right:24px;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9tYXJzLXRoZW1lL3NyYy9jb21wb25lbnRzL3BhZ2VzL3BhZ2UuanM/YzgxMyJdLCJuYW1lcyI6WyJQYWdlIiwic3RhdGUiLCJhY3Rpb25zIiwibGlicmFyaWVzIiwiZGF0YSIsInNvdXJjZSIsImdldCIsInJvdXRlciIsImxpbmsiLCJwYWdlIiwidHlwZSIsImlkIiwiSHRtbDJSZWFjdCIsImh0bWwycmVhY3QiLCJDb21wb25lbnQiLCJ1c2VFZmZlY3QiLCJmZXRjaCIsIkxpc3QiLCJwcmVsb2FkIiwiaXNSZWFkeSIsIl9faHRtbCIsInRpdGxlIiwicmVuZGVyZWQiLCJjb250ZW50IiwiY29ubmVjdCIsIkFydGljbGVDb250YWluZXIiLCJUaXRsZUFsaWduIiwiVGl0bGUiLCJTdHlsZWRMaW5rIiwiTGluayIsIkF1dGhvciIsIkRhdGVXcmFwcGVyIiwiQ29udGVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7cVJBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxLQUFNQSxLQUFJLENBQUcsQ0FBQyxDQUFFQyxLQUFGLENBQVNDLE9BQVQsQ0FBa0JDLFNBQWxCLENBQUQsR0FBbUMsQ0FDOUM7QUFDQSxLQUFNQyxLQUFJLENBQUdILEtBQUssQ0FBQ0ksTUFBTixDQUFhQyxHQUFiLENBQWlCTCxLQUFLLENBQUNNLE1BQU4sQ0FBYUMsSUFBOUIsQ0FBYixDQUNBO0FBQ0EsS0FBTUMsS0FBSSxDQUFHUixLQUFLLENBQUNJLE1BQU4sQ0FBYUQsSUFBSSxDQUFDTSxJQUFsQixFQUF3Qk4sSUFBSSxDQUFDTyxFQUE3QixDQUFiLENBRUE7QUFDQSxLQUFNQyxXQUFVLENBQUdULFNBQVMsQ0FBQ1UsVUFBVixDQUFxQkMsU0FBeEMsQ0FFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBLEtBQ0VDLHVEQUFTLENBQUMsSUFBTSxDQUNkYixPQUFPLENBQUNHLE1BQVIsQ0FBZVcsS0FBZixDQUFxQixHQUFyQixFQUNBQyw2Q0FBSSxDQUFDQyxPQUFMLEdBQ0QsQ0FIUSxDQUdOLEVBSE0sQ0FBVCxDQUtBO0FBQ0EsTUFBT2QsS0FBSSxDQUFDZSxPQUFMLENBQ0wsd0VBQUMsZ0JBQUQsWUFDRSx1RUFBQyxVQUFELFdBQ0UsdUVBQUMsS0FBRCxFQUFPLHVCQUF1QixDQUFFLENBQUVDLE1BQU0sQ0FBRVgsSUFBSSxDQUFDWSxLQUFMLENBQVdDLFFBQXJCLENBQWhDLEVBREYsRUFERixDQW1DSSx1RUFBQyxPQUFELFdBQ0UsdUVBQUMsVUFBRCxFQUFZLElBQUksQ0FBRWIsSUFBSSxDQUFDYyxPQUFMLENBQWFELFFBQS9CLEVBREYsRUFuQ0osR0FESyxDQXlDSCxJQXpDSixDQTBDRCxDQTlERCxDQWdFZUUsdUhBQU8sQ0FBQ3hCLElBQUQsQ0FBdEIsRUFFQSxLQUFNeUIsaUJBQWdCLG16UUFBdEIsQ0FPQSxLQUFNQyxXQUFVLHl3UUFBaEIsQ0FJQSxLQUFNQyxNQUFLLDR4UUFBWCxDQU1BLEtBQU1DLFdBQVUsQ0FBRyxvRUFBTSxDQUFDQyw2Q0FBUCwwREFBSCwrb1FBQWhCLENBSUEsS0FBTUMsT0FBTSwreFFBQVosQ0FNQSxLQUFNQyxZQUFXLG95UUFBakIsQ0FNQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLEtBQU1DLFFBQU8sZ3lUQUFiIiwiZmlsZSI6Ii4vcGFja2FnZXMvbWFycy10aGVtZS9zcmMvY29tcG9uZW50cy9wYWdlcy9wYWdlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcbmltcG9ydCBMaW5rIGZyb20gXCIuLi9saW5rXCI7XG5pbXBvcnQgTGlzdCBmcm9tIFwiLi4vbGlzdFwiO1xuXG4vKipcbiAqIFRoZSBQb3N0IGNvbXBvbmVudCB0aGF0IE1hcnMgdXNlcyB0byByZW5kZXIgYW55IGtpbmQgb2YgXCJwb3N0IHR5cGVcIiwgbGlrZVxuICogcG9zdHMsIHBhZ2VzLCBhdHRhY2htZW50cywgZXRjLlxuICpcbiAqIEl0IGRvZXNuJ3QgcmVjZWl2ZSBhbnkgcHJvcCBidXQgdGhlIEZyb250aXR5IHN0b3JlLCB3aGljaCBpdCByZWNlaXZlcyBmcm9tXG4gKiB7QGxpbmsgY29ubmVjdH0uIFRoZSBjdXJyZW50IEZyb250aXR5IHN0YXRlIGlzIHVzZWQgdG8ga25vdyB3aGljaCBwb3N0IHR5cGVcbiAqIHNob3VsZCBiZSByZW5kZXJlZC5cbiAqXG4gKiBAcGFyYW0gcHJvcHMgLSBUaGUgRnJvbnRpdHkgc3RvcmUgKHN0YXRlLCBhY3Rpb25zLCBhbmQgbGlicmFyaWVzKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIDxTd2l0Y2g+XG4gKiAgIDxQb3N0IHdoZW49e2RhdGEuaXNQb3N0VHlwZX0gLz5cbiAqIDwvU3dpdGNoPlxuICogYGBgXG4gKlxuICogQHJldHVybnMgVGhlIHtAbGluayBQb3N0fSBlbGVtZW50IHJlbmRlcmVkLlxuICovXG5jb25zdCBQYWdlID0gKHsgc3RhdGUsIGFjdGlvbnMsIGxpYnJhcmllcyB9KSA9PiB7XG4gIC8vIEdldCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBVUkwuXG4gIGNvbnN0IGRhdGEgPSBzdGF0ZS5zb3VyY2UuZ2V0KHN0YXRlLnJvdXRlci5saW5rKTtcbiAgLy8gR2V0IHRoZSBkYXRhIG9mIHRoZSBwb3N0LlxuICBjb25zdCBwYWdlID0gc3RhdGUuc291cmNlW2RhdGEudHlwZV1bZGF0YS5pZF07XG5cbiAgLy8gR2V0IHRoZSBodG1sMnJlYWN0IGNvbXBvbmVudC5cbiAgY29uc3QgSHRtbDJSZWFjdCA9IGxpYnJhcmllcy5odG1sMnJlYWN0LkNvbXBvbmVudDtcblxuICAvKipcbiAgICogT25jZSB0aGUgcG9zdCBoYXMgbG9hZGVkIGluIHRoZSBET00sIHByZWZldGNoIGJvdGggdGhlXG4gICAqIGhvbWUgcG9zdHMgYW5kIHRoZSBsaXN0IGNvbXBvbmVudCBzbyBpZiB0aGUgdXNlciB2aXNpdHNcbiAgICogdGhlIGhvbWUgcGFnZSwgZXZlcnl0aGluZyBpcyByZWFkeSBhbmQgaXQgbG9hZHMgaW5zdGFudGx5LlxuICAgKi9cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhY3Rpb25zLnNvdXJjZS5mZXRjaChcIi9cIik7XG4gICAgTGlzdC5wcmVsb2FkKCk7XG4gIH0sIFtdKTtcblxuICAvLyBMb2FkIHRoZSBwb3N0LCBidXQgb25seSBpZiB0aGUgZGF0YSBpcyByZWFkeS5cbiAgcmV0dXJuIGRhdGEuaXNSZWFkeSA/IChcbiAgICA8QXJ0aWNsZUNvbnRhaW5lcj5cbiAgICAgIDxUaXRsZUFsaWduPlxuICAgICAgICA8VGl0bGUgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBwYWdlLnRpdGxlLnJlbmRlcmVkIH19IC8+XG5cbiAgICAgICAgey8qIEhpZGUgYXV0aG9yIGFuZCBkYXRlIG9uIHBhZ2VzXG4gICAgICAgIHshZGF0YS5pc1BhZ2UgJiYgKFxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICB7YXV0aG9yICYmIChcbiAgICAgICAgICAgICAgPFN0eWxlZExpbmsgbGluaz17YXV0aG9yLmxpbmt9PlxuICAgICAgICAgICAgICAgIDxBdXRob3I+XG4gICAgICAgICAgICAgICAgICBFZGl0b3I6IDxiPnthdXRob3IubmFtZX08L2I+XG4gICAgICAgICAgICAgICAgPC9BdXRob3I+XG4gICAgICAgICAgICAgIDwvU3R5bGVkTGluaz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8RGF0ZVdyYXBwZXI+XG4gICAgICAgICAgICAgIHtcIiBcIn1cbiAgICAgICAgICAgICAgb24gPGI+e2RhdGUudG9EYXRlU3RyaW5nKCl9PC9iPlxuICAgICAgICAgICAgPC9EYXRlV3JhcHBlcj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKX0gKi99XG4gICAgICA8L1RpdGxlQWxpZ24+XG4gICAgICB7LyogTG9vayBhdCB0aGUgc2V0dGluZ3MgdG8gc2VlIGlmIHdlIHNob3VsZCBpbmNsdWRlIHRoZSBmZWF0dXJlZCBpbWFnZSAqL31cbiAgICAgIHsvKiB7c3RhdGUudGhlbWUuZmVhdHVyZWQuc2hvd09uUG9zdCAmJiAoXG4gICAgICAgIDxGZWF0dXJlZE1lZGlhIGlkPXtwb3N0LmZlYXR1cmVkX21lZGlhfSAvPlxuICAgICAgKX0gKi99XG5cblxuICAgICAgey8qIHtkYXRhLmlzQXR0YWNobWVudCA/IChcbiAgICAgICAgLy8gSWYgdGhlIHBvc3QgaXMgYW4gYXR0YWNobWVudCwganVzdCByZW5kZXIgdGhlIGRlc2NyaXB0aW9uIHByb3BlcnR5LFxuICAgICAgICAvLyB3aGljaCBhbHJlYWR5IGNvbnRhaW5zIHRoZSB0aHVtYm5haWwuXG4gICAgICAgIDxkaXYgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBwb3N0LmRlc2NyaXB0aW9uLnJlbmRlcmVkIH19IC8+XG4gICAgICApIDogKCAqL31cbiAgICAgICAgey8qIC8vIFJlbmRlciB0aGUgY29udGVudCB1c2luZyB0aGUgSHRtbDJSZWFjdCBjb21wb25lbnQgc28gdGhlIEhUTUwgaXMgKi99XG4gICAgICAgIHsvKiAvLyBwcm9jZXNzZWQgYnkgdGhlIHByb2Nlc3NvcnMgd2UgaW5jbHVkZWQgaW4gdGhlICovfVxuICAgICAgICB7LyogLy8gbGlicmFyaWVzLmh0bWwycmVhY3QucHJvY2Vzc29ycyBhcnJheS4gKi99XG4gICAgICAgIDxDb250ZW50PlxuICAgICAgICAgIDxIdG1sMlJlYWN0IGh0bWw9e3BhZ2UuY29udGVudC5yZW5kZXJlZH0gLz5cbiAgICAgICAgPC9Db250ZW50PlxuICAgICAgey8qICl9ICovfVxuICAgIDwvQXJ0aWNsZUNvbnRhaW5lcj5cbiAgKSA6IG51bGw7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFBhZ2UpO1xuXG5jb25zdCBBcnRpY2xlQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6MTAwJTtcbiAgbWF4LXdpZHRoOiA5NjBweDtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHBhZGRpbmc6IDE0cHg7XG5gO1xuXG5jb25zdCBUaXRsZUFsaWduID0gc3R5bGVkLmRpdmBcbiAgdGV4dC1hbGlnbjpjZW50ZXI7XG5gO1xuXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5oM2BcbiAgbWFyZ2luOiAwO1xuICBtYXJnaW4tdG9wOiAyNHB4O1xuICBtYXJnaW4tYm90dG9tOiA0cHg7XG5gO1xuXG5jb25zdCBTdHlsZWRMaW5rID0gc3R5bGVkKExpbmspYFxuICBwYWRkaW5nOiAxNXB4IDA7XG5gO1xuXG5jb25zdCBBdXRob3IgPSBzdHlsZWQucGBcbiAgY29sb3I6ICM2NjY2NjY7XG4gIGZvbnQtc2l6ZTogMC45ZW07XG4gIGRpc3BsYXk6IGlubGluZTtcbmA7XG5cbmNvbnN0IERhdGVXcmFwcGVyID0gc3R5bGVkLnBgXG4gIGNvbG9yOiAjNjY2NjY2O1xuICBmb250LXNpemU6IDAuOWVtO1xuICBkaXNwbGF5OiBpbmxpbmU7XG5gO1xuXG4vKipcbiAqIFRoaXMgY29tcG9uZW50IGlzIHRoZSBwYXJlbnQgb2YgdGhlIGBjb250ZW50LnJlbmRlcmVkYCBIVE1MLiBXZSBjYW4gdXNlIG5lc3RlZFxuICogc2VsZWN0b3JzIHRvIHN0eWxlIHRoYXQgSFRNTC5cbiAqL1xuY29uc3QgQ29udGVudCA9IHN0eWxlZC5kaXZgXG4gIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7XG4gIG1hcmdpbi10b3A6IDMwcHg7XG4gICoge1xuICAgIG1heC13aWR0aDogNjI0cHg7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgbWFyZ2luOiBhdXRvO1xuICB9XG5cbiAgcCB7XG4gICAgbGluZS1oZWlnaHQ6IDEuNTVlbTtcbiAgICBmb250LXNpemU6IDEuMTVlbTtcbiAgICBsZWV0ZXItc3BhY2luZzogLjAxZW07XG4gICAgbWFyZ2luOiAuMmVtIGF1dG8gMS4xZW07XG4gIH1cblxuICBpbWcge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG9iamVjdC1maXQ6IGNvdmVyO1xuICAgIG9iamVjdC1wb3NpdGlvbjogY2VudGVyO1xuICB9XG5cbiAgZmlndXJlIHtcbiAgICBtYXJnaW46IDI0cHggYXV0bztcbiAgICB3aWR0aDogMTAwJTtcblxuICAgIGZpZ2NhcHRpb24ge1xuICAgICAgZm9udC1zaXplOiAwLjdlbTtcbiAgICB9XG4gIH1cblxuICBpZnJhbWUge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIG1hcmdpbjogYXV0bztcbiAgfVxuXG4gIGJsb2NrcXVvdGUge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBtYXJnaW46IDE2cHggYXV0bztcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gICAgYm9yZGVyLWxlZnQ6IDRweCBzb2xpZCByZ2JhKDEyLCAxNywgNDMpO1xuICAgIHBhZGRpbmc6IDRweCAxNnB4O1xuICB9XG5cbiAgYSB7XG4gICAgY29sb3I6IHJnYigzMSwgNTYsIDE5Nyk7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIH1cblxuICAvKiBJbnB1dCBmaWVsZHMgc3R5bGVzICovXG5cbiAgaW5wdXRbdHlwZT1cInRleHRcIl0sXG4gIGlucHV0W3R5cGU9XCJlbWFpbFwiXSxcbiAgaW5wdXRbdHlwZT1cInVybFwiXSxcbiAgaW5wdXRbdHlwZT1cInRlbFwiXSxcbiAgaW5wdXRbdHlwZT1cIm51bWJlclwiXSxcbiAgaW5wdXRbdHlwZT1cImRhdGVcIl0sXG4gIHRleHRhcmVhLFxuICBzZWxlY3Qge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBhZGRpbmc6IDZweCAxMnB4O1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIGxpbmUtaGVpZ2h0OiAxLjU7XG4gICAgY29sb3I6ICM0OTUwNTc7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcbiAgICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjZWQ0ZGE7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIG91dGxpbmUtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgIHRyYW5zaXRpb246IG91dGxpbmUtY29sb3IgMC4xNXMgZWFzZS1pbi1vdXQsIGJveC1zaGFkb3cgMC4xNXMgZWFzZS1pbi1vdXQ7XG4gICAgbWFyZ2luOiA4cHggMCA0cHggMDtcblxuICAgICY6Zm9jdXMge1xuICAgICAgb3V0bGluZS1jb2xvcjogIzFmMzhjNTtcbiAgICB9XG4gIH1cblxuICBpbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICBmb250LXdlaWdodDogNDAwO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgLW1zLXRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xuICAgIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBub25lO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICMxZjM4YzU7XG4gICAgcGFkZGluZzogMTJweCAzNnB4O1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICBsaW5lLWhlaWdodDogMS40Mjg1NzE0MztcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFmMzhjNTtcbiAgfVxuXG4gIC8qIFdvcmRQcmVzcyBDb3JlIEFsaWduIENsYXNzZXMgKi9cblxuICBAbWVkaWEgKG1pbi13aWR0aDogNDIwcHgpIHtcbiAgICBpbWcuYWxpZ25jZW50ZXIsXG4gICAgaW1nLmFsaWdubGVmdCxcbiAgICBpbWcuYWxpZ25yaWdodCB7XG4gICAgICB3aWR0aDogYXV0bztcbiAgICB9XG5cbiAgICAuYWxpZ25jZW50ZXIge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcbiAgICB9XG5cbiAgICAuYWxpZ25yaWdodCB7XG4gICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICBtYXJnaW4tbGVmdDogMjRweDtcbiAgICB9XG5cbiAgICAuYWxpZ25sZWZ0IHtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgbWFyZ2luLXJpZ2h0OiAyNHB4O1xuICAgIH1cbiAgfVxuYDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/pages/page.js\n");

/***/ })

})