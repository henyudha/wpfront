webpackHotUpdate("wpfront",{

/***/ "./packages/mars-theme/src/components/post.js":
/*!****************************************************!*\
  !*** ./packages/mars-theme/src/components/post.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n/* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./link */ \"./packages/mars-theme/src/components/link.js\");\n/* harmony import */ var _list__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./list */ \"./packages/mars-theme/src/components/list/index.js\");\n/* harmony import */ var _featured_media__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./featured-media */ \"./packages/mars-theme/src/components/featured-media.js\");\n/* harmony import */ var _list_list_item__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./list/list-item */ \"./packages/mars-theme/src/components/list/list-item.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}/**\n * The Post component that Mars uses to render any kind of \"post type\", like\n * posts, pages, attachments, etc.\n *\n * It doesn't receive any prop but the Frontity store, which it receives from\n * {@link connect}. The current Frontity state is used to know which post type\n * should be rendered.\n *\n * @param props - The Frontity store (state, actions, and libraries).\n *\n * @example\n * ```js\n * <Switch>\n *   <Post when={data.isPostType} />\n * </Switch>\n * ```\n *\n * @returns The {@link Post} element rendered.\n */const Post=({state,actions,libraries})=>{// Get information about the current URL.\nconst data=state.source.get(state.router.link);// Get the data of the post.\nconst post=state.source[data.type][data.id];// Get the data of the author.\nconst author=state.source.author[post.author];// Get a human readable date.\nconst date=new Date(post.date);// Tampilkan tags\nconst tag=state.source.tag[post.tags];// Get the html2react component.\nconst Html2React=libraries.html2react.Component;/**\n   * Once the post has loaded in the DOM, prefetch both the\n   * home posts and the list component so if the user visits\n   * the home page, everything is ready and it loads instantly.\n   */Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useEffect\"])(()=>{actions.source.fetch(\"/\");_list__WEBPACK_IMPORTED_MODULE_4__[\"default\"].preload();},[actions.source]);// Load the post, but only if the data is ready.\nreturn data.isReady?Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(Container,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(TitleAlign,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Title,{dangerouslySetInnerHTML:{__html:post.title.rendered}}),!data.isPage&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(\"div\",{children:[author&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledLink,{link:author.link,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(Author,{children:[\"Editor: \",Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"b\",{children:author.name})]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(DateWrapper,{children:[\" \",\"on \",Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"b\",{children:date.toDateString()})]})]})]}),state.theme.featured.showOnPost&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_featured_media__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{id:post.featured_media}),data.isAttachment?// If the post is an attachment, just render the description property,\n// which already contains the thumbnail.\nObject(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"div\",{dangerouslySetInnerHTML:{__html:post.description.rendered}}):// Render the content using the Html2React component so the HTML is\n// processed by the processors we included in the\n// libraries.html2react.processors array.\nObject(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(Content,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Html2React,{html:post.content.rendered}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledLink,{link:tag.link,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_7__[\"jsxs\"])(Tag,{children:[\"Tags: \",tag.name]})})]})]}):null;};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Post));const Container=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\", false?undefined:{target:\"emgezev7\",label:\"Container\"})( false?undefined:{name:\"8m5738\",styles:\"width:100%;max-width:960px;margin:0 auto;padding:14px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const TitleAlign=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\", false?undefined:{target:\"emgezev6\",label:\"TitleAlign\"})( false?undefined:{name:\"1azakc\",styles:\"text-align:center\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Title=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"h3\", false?undefined:{target:\"emgezev5\",label:\"Title\"})( false?undefined:{name:\"ymdyv3\",styles:\"margin:0;margin-top:24px;margin-bottom:4px\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const StyledLink=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"], false?undefined:{target:\"emgezev4\",label:\"StyledLink\"})( false?undefined:{name:\"1k93czn\",styles:\"padding:15px 0\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Author=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"p\", false?undefined:{target:\"emgezev3\",label:\"Author\"})( false?undefined:{name:\"1i1qai6\",styles:\"color:#666666;font-size:0.9em;display:inline\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const DateWrapper=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"p\", false?undefined:{target:\"emgezev2\",label:\"DateWrapper\"})( false?undefined:{name:\"1i1qai6\",styles:\"color:#666666;font-size:0.9em;display:inline\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Tag=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\", false?undefined:{target:\"emgezev1\",label:\"Tag\"})( false?undefined:{name:\"1q61y37\",styles:\"color:hsl(116, 0%, 40%);font-size:0.9em;text-decoration:none\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/**\n * This component is the parent of the `content.rendered` HTML. We can use nested\n * selectors to style that HTML.\n */const Content=Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"styled\"])(\"div\", false?undefined:{target:\"emgezev0\",label:\"Content\"})( false?undefined:{name:\"1imw57r\",styles:\"word-break:break-word;margin-top:30px;*{max-width:624px;width:100%;margin:auto;}p{line-height:1.55em;font-size:1.15em;margin:0.2em auto 1.1em;}img{width:100%;object-fit:cover;object-position:center;}figure{margin:24px auto;width:100%;figcaption{font-size:0.7em;}}iframe{display:block;margin:auto;}blockquote{margin:16px auto;background-color:rgba(0, 0, 0, 0.1);border-left:4px solid rgba(12, 17, 43);padding:4px 16px;}a{color:rgb(31, 56, 197);text-decoration:underline;}input[type=\\\"text\\\"],input[type=\\\"email\\\"],input[type=\\\"url\\\"],input[type=\\\"tel\\\"],input[type=\\\"number\\\"],input[type=\\\"date\\\"],textarea,select{display:block;padding:6px 12px;font-size:16px;font-weight:400;line-height:1.5;color:#495057;background-color:#fff;background-clip:padding-box;border:1px solid #ced4da;border-radius:4px;outline-color:transparent;transition:outline-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out;margin:8px 0 4px 0;&:focus{outline-color:#1f38c5;}}input[type=\\\"submit\\\"]{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;background-image:none;border:1px solid #1f38c5;padding:12px 36px;font-size:14px;line-height:1.42857143;border-radius:4px;color:#fff;background-color:#1f38c5;}@media (min-width: 420px){img.aligncenter,img.alignleft,img.alignright{width:auto;}.aligncenter{display:block;margin-left:auto;margin-right:auto;}.alignright{float:right;margin-left:24px;}.alignleft{float:left;margin-right:24px;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/post.js\n");

/***/ })

})